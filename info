import win32com.client as win32
import pandas as pd
from openpyxl import load_workbook

from tqdm import tqdm
import shutil
import os
import warnings
from concurrent.futures import ThreadPoolExecutor
import time
from datetime import datetime
import re
import xlwings as xw

import google.auth
from google.cloud import bigquery
from google.api_core.exceptions import NotFound

warnings.filterwarnings('ignore')

start_time = time.time()


def Bigquery_connect(row):
    if 'prod' in row['Project']:
        project = row['Project']
        credentials, _ = google.auth.default()
        client = bigquery.Client(credentials=credentials, project=project)
        print("BIGQUERY prod client connected")
    elif 'dev' in row['Project']:
        os.environ["HTTP_PROXY"] = "googleapis-dev.gcp.cloud.uk.hsbc:3128"
        os.environ["HTTPS_PROXY"] = "googleapis-dev.gcp.cloud.uk.hsbc:3128"
        project = row['Project']
        credentials, _ = google.auth.default()
        client = bigquery.Client(credentials=credentials, project=project)
        print("BIGQUERY dev client connected")

    if row['Source'] == 'Test':
        sheet_name = 'Production Data'
    elif row['Source'] == 'Baseline':
        sheet_name = 'Test Data'

    return client, sheet_name


def copy_prod_data(df, file_path, sheet_name, row):
    try:
        # Step 1: Add "ApproachAndClass" column
        df['ApproachAndClass'] = df['Post_CRM_PRA_Reporting_Approach'] + df['POST_CRM_Corep_Exposure_Class']

        # Step 2: Add "Modified_Customer_Group" column
        df['Modified_Customer_Group'] = df['Customer_group'].apply(lambda x: 'PFS' if x == 'GPB' else x)

        # Step 3: Open the XLSM file using openpyxl (keep VBA)
        book = load_workbook(file_path, keep_vba=True)

        # Step 4: Remove existing sheet if it exists
        if sheet_name in book.sheetnames:
            del book[sheet_name]

        # Step 5: Write data to new sheet using ExcelWriter
        with pd.ExcelWriter(file_path, engine='openpyxl', mode='a') as writer:
            writer._book = book
            df.to_excel(writer, sheet_name=sheet_name, index=False)

        # Step 5.1: Write to specific cells
        if sheet_name == 'Production Data':
            book['Start']["F10"] = row['Project']
            book['Start']["G10"] = row['Batch']
        elif sheet_name == 'Test Data':
            book['Start']["F11"] = row['Project']
            book['Start']["G11"] = row['Batch']

        # Step 6: Save the workbook explicitly (to retain VBA macros)
        book.save(file_path)

        print(f"Data written successfully to '{sheet_name}'.")

    except Exception as e:
        print(f"Error: {e}")


def main(config_file_path, template_path, output_folder):
    df_config = pd.read_excel(config_file_path, sheet_name='Config')
    df_config = df_config[df_config['S.No.'].notna()]
    df_SQL_mapping = pd.read_excel(config_file_path, sheet_name='SQLs')

    # Step 3: Merge the template into the main table based on the regulator
    df_config = df_config.merge(df_SQL_mapping, on='Regulator', how='left')
    df_config['SQL'] = df_config['SQL'].astype(str)

    # Step 4: Replace placeholders using format()
    df_config['SQL'] = df_config.apply(lambda row: row['SQL'].format(**row), axis=1)

    unique_combinations = df_config[['Site', 'Regulator', 'Date']].drop_duplicates()
    for _, row in unique_combinations.iterrows():
        output_file = f"{row['Site']}_{row['Regulator']}_{row['Date']}.xlsm"
        output_path = os.path.join(output_folder, output_file)
        shutil.copy(template_path, output_path)

    for site in df_config['Site'].unique():
        site_data = df_config[df_config['Site'] == site]
        for _, row in site_data.iterrows():
            output_file = f"{row['Site']}_{row['Regulator']}_{row['Date']}.xlsm"
            output_path = os.path.join(output_folder, output_file)

            query_client, sheet_name = Bigquery_connect(row)
            catalog_bq_query = query_client.query(row['SQL'])
            catalog_df = catalog_bq_query.to_dataframe().fillna("")

            copy_prod_data(catalog_df, output_path, sheet_name, row)

    # -------- Excel automation begins --------
    # Safely kill any running Excel instance if exists
    try:
        import subprocess
        subprocess.run(["taskkill", "/f", "/im", "excel.exe"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        pass  # Excel not running, continue safely

    excel = win32.gencache.EnsureDispatch("Excel.Application")
    excel.Visible = True

    for _, row in unique_combinations.iterrows():
        output_file = f"{row['Site']}_{row['Regulator']}_{row['Date']}.xlsm"
        output_path = os.path.join(output_folder, output_file)

        workbook = excel.Workbooks.Open(output_path)
        macro_name = 'Module1.Update_Parameters'  # Format: ModuleName.MacroName
        excel.Application.Run(macro_name)
        workbook.Save()
        workbook.Close()

    excel.Quit()

    # Final clean-up Excel instance if required
    try:
        subprocess.run(["taskkill", "/f", "/im", "excel.exe"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        pass

    end_time = time.time()
    elapsed_time = end_time - start_time
    minutes = int(elapsed_time // 60)
    seconds = int(elapsed_time % 60)
    print(f"Execution time: {minutes} minutes, {seconds} seconds")


if __name__ == "__main__":
    template_path = r'C:\Users\43707738\Desktop\June 2025 TCoE Automation\Dashboard Automation\Dashboard_Template.xlsm'
    output_folder = r'C:\Users\43707738\Desktop\June 2025 TCoE Automation\Dashboard Automation\output'
    config_file_path = "config_details.xlsx"

    main(config_file_path, template_path, output_folder)