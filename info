#!/bin/bash

# Step 1: Create project folder
mkdir -p langgraph_project
cd langgraph_project || exit

# Step 2: Create validate_input.py
cat << 'EOF' > validate_input.py
def run(input_data):
    print("Running validate_input...")
    if isinstance(input_data, str) and input_data.strip():
        return {"validated": True, "data": input_data}
    else:
        return {"validated": False, "error": "Invalid input"}
EOF

# Step 3: Create transform_data.py
cat << 'EOF' > transform_data.py
def run(state):
    print("Running transform_data...")
    data = state.get("data", "")
    transformed = data.upper()
    return {"transformed_data": transformed}
EOF

# Step 4: Create main.py
cat << 'EOF' > main.py
from langgraph.graph import StateGraph
import importlib.util

def run_python_file(file_path, input_data):
    spec = importlib.util.spec_from_file_location("module.name", file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module.run(input_data)

def validate_node(state):
    return run_python_file("validate_input.py", state["input"])

def transform_node(state):
    return run_python_file("transform_data.py", state)

builder = StateGraph(dict)
builder.set_entry_point("validate")
builder.add_node("validate", validate_node)
builder.add_node("transform", transform_node)
builder.add_edge("validate", "transform")
graph = builder.compile()

if __name__ == "__main__":
    initial_input = {"input": "sample string"}
    result = graph.invoke(initial_input)
    print("Final Result:", result)
EOF

# Step 5: Create requirements.txt
cat << 'EOF' > requirements.txt
langgraph==0.0.38
langchain==0.1.20
EOF

# Step 6: Set up virtual environment and install packages
python3 -m venv .venv
source .venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt

# Step 7: Run the workflow
python main.py