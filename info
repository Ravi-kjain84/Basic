import pyodbc
import pandas as pd
from datetime import datetime


def get_connection(
    server: str,
    database: str,
    username: str = "",
    password: str = "",
    driver: str = "{ODBC Driver 17 for SQL Server}",
    timeout: int = 5
) -> pyodbc.Connection:
    """
    Returns an open pyodbc connection using Windows or SQL authentication.
    """

    if username and password:
        conn_str = (
            f"DRIVER={driver};"
            f"SERVER={server};"
            f"DATABASE={database};"
            f"UID={username};"
            f"PWD={password};"
            f"TrustServerCertificate=yes;"
            f"Connection Timeout={timeout};"
        )
    else:
        conn_str = (
            f"DRIVER={driver};"
            f"SERVER={server};"
            f"DATABASE={database};"
            "Trusted_Connection=yes;"
            "TrustServerCertificate=yes;"
            f"Connection Timeout={timeout};"
        )

    return pyodbc.connect(conn_str)


def run_query_to_df(conn: pyodbc.Connection, sql: str) -> pd.DataFrame:
    """
    Executes the SQL query and returns the result as a pandas DataFrame.
    """
    try:
        df = pd.read_sql(sql, conn)
        print(f"Query executed successfully — {len(df)} rows returned.")
        return df
    except Exception as e:
        print("Error running query:", e)
        return pd.DataFrame()


def save_to_csv(df: pd.DataFrame, base_filename: str = "query_output") -> str:
    """
    Saves the DataFrame to a timestamped CSV file and returns the file path.
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{base_filename}_{timestamp}.csv"
    df.to_csv(filename, index=False, encoding="utf-8-sig")
    print(f"✅ Data saved to CSV file: {filename}")
    return filename


if __name__ == "__main__":
    # Replace with actual credentials or environment variables
    SERVER = "GBW25099261.hbeu.adroot.hsbc,10010"
    DATABASE = "CPDB"
    USERNAME = ""  # leave blank for Windows auth
    PASSWORD = ""

    SQL_QUERY = "SELECT TOP 10 * FROM CP_PROJ_MOV_VER;"  # sample query

    try:
        conn = get_connection(SERVER, DATABASE, USERNAME, PASSWORD)
        print("Connection successful.")

        df_result = run_query_to_df(conn, SQL_QUERY)

        if not df_result.empty:
            save_to_csv(df_result)
        else:
            print("⚠️ No data returned from query.")

    except pyodbc.Error as e:
        print("Connection failed:", e)

    finally:
        try:
            conn.close()
            print("Connection closed.")
        except Exception:
            pass